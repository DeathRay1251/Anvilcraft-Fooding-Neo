plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.75'
}

version = mod_version
group = maven_group

apply from: "$rootDir/gradle/scripts/repositories.gradle"

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Registrate
    api("com.tterrag.registrate:Registrate:${libs.versions.registrate.get()}")
    jarJar("com.tterrag.registrate:Registrate:${libs.versions.registrate.get()}")

    // Anvil Lib
    implementation(libs.anvillib)
    jarJar(libs.anvillib)

    //AnvilCraft
    implementation(libs.anvilcraft)
    jarJar(libs.anvilcraft)

    // Cloth Config
    implementation(libs.clothConfig)
    jarJar(libs.clothConfig)

    // Curios API
    implementation(libs.curios)

    // JEI
    compileOnlyApi(libs.jeiCommonApi) { transitive = false }
    compileOnlyApi(libs.jeiForgeApi) { transitive = false }
    implementation(libs.jeiForgeImpl) { transitive = false }

    // REI
    compileOnlyApi(libs.reiPlugin)
    compileOnlyApi(libs.reiApi)
    compileOnly(libs.reiForge)

    // EMI
    compileOnlyApi("dev.emi:emi-neoforge:${libs.versions.emi.get()}:api")
    compileOnly(libs.emi)

    // Patchouli
    compileOnlyApi("vazkii.patchouli:Patchouli:${libs.versions.patchouli.get()}:api")
    runtimeOnly(libs.patchouli)

    // Sodium, Iris, Embeddium
    compileOnly("maven.modrinth:sodium:mc1.21.1-0.6.3-neoforge")
    compileOnly("maven.modrinth:embeddium:1.0.11+mc1.21.1")
    compileOnly("maven.modrinth:iris:1.8.1+1.21.1-neoforge")

    // Jade, The One Probe, KubeJS
    implementation(libs.jade)
    implementation(libs.theoneprobe)
    implementation(libs.kubejs)
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        // Add repositories to publish to here.
        def MAVEN_URL = System.getenv("MAVEN_URL")
        if (MAVEN_URL != null) {
            maven {
                url MAVEN_URL
                credentials {
                    username System.getenv("MAVEN_USERNAME")
                    password System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
